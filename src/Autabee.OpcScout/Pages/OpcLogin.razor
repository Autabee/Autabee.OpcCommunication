@using Autabee.Communication.ManagedOpcClient;
@using Autabee.OpcScout.Data;
@using Autabee.OpcScout.MBRazorControl.Dialoges;
@using Autabee.OpcScout.RazorControl;
@using Opc.Ua;
@using System.Security.Cryptography.X509Certificates
@using System.Text.RegularExpressions;
@using Serilog.Core;

@inject Logger logger
@inject OpcScoutPersistentData backend
@inject NavigationManager Navigation
@inject ApplicationConfiguration config
@inject IPersistentProgramData<List<EndpointRecord>> EndpointsConnection
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@page "/Opc/Login"

@if (Loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}


<table class="loginform NodeTableForm">
    <tr>
        <td>Server</td>
        <td><input @bind="server" type="url" /></td>
        <td><button @onclick="GetEnpoints" class="Info" style="float:left;height:25px; width:25px; padding:1px;"><icon class="mdi mdi-magnify"></icon></button></td>
    </tr>
    <tr>
        <td>Endpoint record</td>
        <td>
            <select style="height:25px; " type="connection record" @onchange="SetEndpoint" placeholder="***">
                @foreach (var item in savedEndpoints)
                {
                    @if (item != null)
                    {
                        <option value="@item.Name;@item.Server;@item.Description">@item.Name : @item.Server</option>
                    }
                }
            </select>
        </td>
        <td>
            <button @onclick="Connect" class="Info MicroButton" style="float:left"><icon class="mdi mdi-connection"></icon></button>
            <button @onclick="Edit" class="Info MicroButton" style="float:left"><icon class="mdi mdi-cog"></icon></button>
        </td>
    </tr>

    <tr>
        <td>Username</td>
        <td><input type="text" @bind="username" placeholder="username.." /></td>
        <td></td>
    </tr>
    <tr>
        <td>Password</td>
        <td><input type="password" @bind="password" placeholder="***" /></td>
        <td></td>
    </tr>

</table>

@if (endpoints == null)
{
    <div class="Empty">
        @searchText
    </div>
}
@*else if (editingEndpoint)
{
    <EditConnectionDetails Endpoint="@editingEndpointRecord" EndpointEditResult="@EditResult" />
}*@
else
{
    <br />
    <table class="Endpoints">
        <thead>
            <tr>
                <th>Endpoint</th>
                <th>Policy</th>
                <th>Mode</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var endpoint in endpoints)
            {
                <tr class="data-item">
                    <td>@endpoint.EndpointUrl</td>
                    <td>@endpoint.SecurityPolicyUri.Substring(43)</td>
                    <td>@endpoint.SecurityMode</td>
                    <td class="node-actions">
                        <button @onclick="()=> SaveAndConnect(endpoint)" class="mdi mdi-content-save Info" title="Connect & Save" />
                        <button @onclick="()=> (Connect(endpoint))" class="mdi mdi-connection Info" title="Try Connect" />
                        @if (!@CertAccepted[endpoints.IndexOf(endpoint)])
                        {
                            <button @onclick="() => AcceptCert(endpoint.ServerCertificate)" class="mdi mdi-certificate Danger" title="Accept Certificate" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    AutabeeManagedOpcClient Client;
    string server = string.Empty;
    string username = string.Empty;
    string password = string.Empty;
    string searchText = "Request server for endpoints";

    Task<EndpointDescriptionCollection> DiscoveryTask = null;
    Task ConnectionTask = null;


    EndpointDescriptionCollection endpoints;
    EndpointDescription selectedEndpoint;
    EndpointRecord dropSelectedEndpoint;
    EndpointRecord editingEndpointRecord;
    bool[] CertAccepted;
    X509Certificate2 lastCert = null;
    bool AcceptLast;
    bool editingEndpoint = false;
    bool Loading = false;
    List<EndpointRecord> savedEndpoints = new List<EndpointRecord>();
    IDialogReference dialog = null;
    bool connected = false;

    protected override void OnInitialized()
    {
        Client = new AutabeeManagedOpcClient(config);
        Client.CertificateValidationNotification += CertificateValidation;
        savedEndpoints = EndpointsConnection.Load();
        savedEndpoints = savedEndpoints == null ? new List<EndpointRecord>() : savedEndpoints.OrderBy(o => o.Name).ToList();
        if (savedEndpoints.Count >= 1)
        {
            dropSelectedEndpoint = savedEndpoints.First();
        }
    }
    public void Dispose()
    {
        Client.CertificateValidationNotification -= CertificateValidation;
    }

    private async void CertificateValidation(CertificateValidator sender, CertificateValidationEventArgs e)
    {
        if (dialog != null)
        {
            return;
        }
        else if (lastCert != null && lastCert.Thumbprint == e.Certificate.Thumbprint && AcceptLast)
        {
            e.Accept = AcceptLast;
            e.AcceptAll = AcceptLast;
            return;
        }


        else {
            await InvokeAsync(() => LocalCertificateValidation(sender, e));
        }
    }

    private async void LocalCertificateValidation(CertificateValidator sender, CertificateValidationEventArgs e)
    {
        
        lastCert = e.Certificate;
        var parameters = new DialogParameters { ["record"] = e };

        dialog = await DialogService.ShowAsync<AcceptCert>("Accept certificate?", parameters, new DialogOptions()
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            });
        var result = await dialog.Result;
        dialog.Close();
        dialog = null;
        if (!result.Canceled)
        {
            try
            {
                //Loading  = true;
                StateHasChanged();
                AcceptLast = true;
                await Connect(selectedEndpoint);
            }
            catch (Exception)
            {
                //Loading = false;
                StateHasChanged();
            }
        }
    }

    void SetEndpoint(ChangeEventArgs e)
    {
        var key = (e.Value as string);
        var selected = savedEndpoints.FirstOrDefault(o =>
        {
            var thiskey = $"{o.Name};{o.Server};{o.Description}";
            return key == thiskey;
        });
        dropSelectedEndpoint = selected;
    }

    public void SaveAndConnect(EndpointDescription endpoint)
    {
        var endpointRecord = new EndpointRecord()
            {
                Server = endpoint.EndpointUrl,
                EndpointUrl = endpoint.EndpointUrl,
                SecurityMode = endpoint.SecurityMode,
                SecurityPolicyUri = endpoint.SecurityPolicyUri
            };
        savedEndpoints.Add(endpointRecord);
        EndpointsConnection.Save(savedEndpoints);
        Connect(endpoint);
    }

    public async void Connect()
    {
        if (dropSelectedEndpoint != null)
        {
            if (DiscoveryTask != null)
            {
                DiscoveryTask.Dispose();
            }

            DiscoveryTask = new Task<EndpointDescriptionCollection>(() =>
            {
                try
                {
                    return AutabeeManagedOpcClient.GetEndpoints(dropSelectedEndpoint.Server);
                }
                catch (Exception e)
                {
                    Snackbar.Add(e.Message, Severity.Error);
                    return null;
                }
            });

            Loading = true;
            await InvokeAsync(StateHasChanged);
            DiscoveryTask.Start();
            await DiscoveryTask;
            endpoints = DiscoveryTask.Result;

            if ((endpoints == null || endpoints.Count == 0))
            {
                searchText = "Opc Server not found";
                return;
            }
            else
            {
                UpdateCertificateStatus();
            }

            try
            {
                UpdateCertificateStatus();
                var selectedEndpoint = endpoints.FirstOrDefault(o => o.SecurityMode == dropSelectedEndpoint.SecurityMode && o.SecurityPolicyUri == dropSelectedEndpoint.SecurityPolicyUri);
                if (selectedEndpoint != null)
                {
                    logger.Information("attempting to connect with:" + selectedEndpoint.Server.ApplicationUri);
                    await Connect(selectedEndpoint);
                }
                else
                {
                    Snackbar.Add("unable to find server", Severity.Error);
                }
            }
            catch (Exception e)
            {
                Snackbar.Add(e.Message, Severity.Error);
            }

            DiscoveryTask = null;
            Loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    public async void Edit()
    {
        if (dropSelectedEndpoint != null)
        {
            editingEndpointRecord = dropSelectedEndpoint;
            var parameters = new DialogParameters { ["record"] = editingEndpointRecord.Copy() };
            var dialog = await DialogService.ShowAsync<EndpointEdit>("Simple Dialog", parameters);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                if (result.Data is Tuple<DialogAction, EndpointRecord> data)
                {
                    var index = 0;
                    if (data.Item1 == DialogAction.Save)
                    {
                        index = savedEndpoints.IndexOf(editingEndpointRecord);
                        savedEndpoints.Remove(editingEndpointRecord);
                        savedEndpoints.Insert(index, data.Item2);

                    }
                    else
                    {
                        index = savedEndpoints.IndexOf(editingEndpointRecord);
                        savedEndpoints.Remove(editingEndpointRecord);
                        index = 0;
                    }
                    EndpointsConnection.Save(savedEndpoints);
                    savedEndpoints = EndpointsConnection.Load();
                    savedEndpoints = savedEndpoints == null ? new List<EndpointRecord>() : savedEndpoints.OrderBy(o => o.Name).ToList();
                    if (index < savedEndpoints.Count)
                    {
                        dropSelectedEndpoint = savedEndpoints[index];
                    }
                    else
                    {
                        dropSelectedEndpoint = null;
                    }

                    Snackbar.Add((data.Item1 == DialogAction.Save ? "Saved" : "Removed") + " Record", Severity.Success);
                    StateHasChanged();
                }
            }
        }
    }

    public bool TaskIsNullOrDisposed(Task task)
    {
        if (task == null) return true;
        try
        {
            if (task.IsCompleted)
            {

            }
        }
        catch (ObjectDisposedException e)
        {
            return true;
        }
        return false;
    }

    public async void GetEnpoints()
    {
        searchText = "Searching Endpoints";
        Stack<string> stackSearch = new Stack<string>();
        if (!Regex.IsMatch(server, @"^((\bopc\.tcp\:\/{2})|(\bhttps\:\/{2}))"))
        {
            stackSearch.Push("https://" + server);
            stackSearch.Push("opc.tcp://" + server);
        }
        else
        {
            stackSearch.Push(server);
        }
        string error = string.Empty;

        if (!TaskIsNullOrDisposed(DiscoveryTask))
        {
            //DiscoveryTask.S
            DiscoveryTask.Dispose();
        }

        var innerTask = new Task<EndpointDescriptionCollection>(() =>
        {
            EndpointDescriptionCollection endpoints = null;
            do
            {
                try
                {
                    var str = stackSearch.Pop();
                    logger.Information("attempting to retrieve endpoints from: " + str);
                    endpoints = AutabeeManagedOpcClient.GetEndpoints(str);
                }
                catch (Exception e)
                {
                    error += "." + e.Message;
                }
            } while (stackSearch.Count > 0 && (endpoints == null || endpoints.Count == 0));
            return endpoints;
        });

        DiscoveryTask = innerTask;
        endpoints = null;
        Loading = true;
        await InvokeAsync(StateHasChanged);
        innerTask.Start();
        try
        {
            await innerTask;
            this.endpoints = innerTask.Result;
            innerTask.Dispose();

            if ((endpoints == null || endpoints.Count == 0))
            {
                searchText = "No Endpoints found";
                if (!string.IsNullOrWhiteSpace(searchText)) Snackbar.Add(searchText, Severity.Error);
            }
            else
            {
                UpdateCertificateStatus();
            }
            Loading = false;
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            Loading = false;
            await InvokeAsync(StateHasChanged);
        }

    }
    public async Task Connect(EndpointDescription endpoint)
    {
        selectedEndpoint = endpoint;
        searchText = $"Connecting to {endpoint.EndpointUrl}";
        Loading = true;
        await InvokeAsync(StateHasChanged);
        if (ConnectionTask != null)
        {
            ConnectionTask.Dispose();
            ConnectionTask = null;
            await Task.Delay(5);
        }

        ConnectionTask = new Task(async () =>
        {
            try
            {

                if (endpoint.SecurityMode == MessageSecurityMode.None)
                {
                    await Client.Connect(endpoint);
                }
                else
                {
                    if (string.IsNullOrEmpty(username)) await Client.Connect(endpoint, null);
                    else await Client.Connect(endpoint, new UserIdentity(username, password));
                }
                if (Client.Connected)
                {
                    backend.clients.Add(new ClientCache(Client, new List<ScannedNodeModel>()));
                    Navigation.NavigateTo("/Opc/Manipulation");
                    connected = true;
                }
                else
                {
                    searchText = "Not Connected";
                }


            }
            catch (Exception e)
            {
                if (searchText.Contains("Accept certificate"))
                {
                    return;
                }

                Snackbar.Add(e.Message, Severity.Error);
                //messageTitle = e.Message;
                //Buttons.Clear();
                //Buttons.Add(ClearMessageButton);
            }
        });
        ConnectionTask.Start();
        await ConnectionTask;
        ConnectionTask.Dispose();
        ConnectionTask = null;
        Loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private void UpdateCertificateStatus()
    {

        CertAccepted = new bool[endpoints.Count];
        for (var i = 0; i < endpoints.Count; i++)
        {
            CertificateValidator validator = new CertificateValidator();

            if (endpoints[i].SecurityMode == MessageSecurityMode.None) CertAccepted[i] = (true);
            else
            {
                var cert = new X509Certificate2(endpoints[i].ServerCertificate);
                try
                {
                    //OpcUaClientHelperApi.ValidateCertificate(cert);
                    validator.Validate(cert);
                    CertAccepted[i] = true;
                }
                catch (Exception)
                {
                    CertAccepted[i] = false;
                }
            }
        }
    }

    public async void AcceptCert(byte[] certdata)
    {
        try
        {

            var parameters = new DialogParameters { ["certificate"] = new CertificateIdentifier(certdata) };

            dialog = await DialogService.ShowAsync<AcceptCert>("Indefinete accept certificate?", parameters, new DialogOptions()
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            });
            var result = await dialog.Result;
            dialog.Close();
            dialog = null;
            if (!result.Canceled)
            {
                try
                {
                    await this.Client.AddCertificateToTrustedStore(certdata);
                    UpdateCertificateStatus();
                }
                catch (Exception)
                {
                }
            }

            
        }
        catch
        {

        }

    }
}
