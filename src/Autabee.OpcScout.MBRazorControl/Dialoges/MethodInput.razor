@using Autabee.Communication.ManagedOpcClient.ManagedNode;
@using Autabee.Communication.ManagedOpcClient;
@using Autabee.OpcScout.RazorControl;
@using Opc.Ua;
@using System.Xml;
@using Autabee.Communication.ManagedOpcClient.Utilities;
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <icon class="mdi mdi-square-edit-outline" />
            Call Function
        </MudText>
    </TitleContent>
    <DialogContent>
        @for (var index = 0; index < record.InputArguments.Count; index++)
        {
            var t = index;
            <OptimalInput Type="record.InputArgumentTypes[index] " Label="@(record.InputArguments[t].Name)" Value=@strValues[t]
                      ValueChanged="(string str) =>{ ValueChangedEvent(t, str);}" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="Call">call</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter]
    public MethodArguments record { get; set; }
    public string[] strValues = new string[0];

    protected override void OnInitialized()
    {
        if (MudDialog == null)
            throw new ArgumentNullException(nameof(MudDialog));
        if (record == null)
            throw new ArgumentNullException(nameof(record));


        strValues = new string[record.InputArguments.Count];

        for (int i = 0; i < strValues.Count(); i++)
        {
            strValues[i] = record.InputArguments[i]?.Value == null 
                ? string.Empty 
                : record.InputArguments[i].Value.ToString();
        }
        base.OnInitialized();
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }


    private void ValueChangedEvent(int index, string value)
    {
        strValues[index] = value;
    }

    private void Call()
    {
        try
        {
            for (int i = 0; i < strValues.Length; i++)
            {
                record.InputArguments[i].Value = ConvertOpc.StringToObject(record.InputArgumentTypes[i], strValues[i]);
            }

            MudDialog.Close(DialogResult.Ok(record));
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }
}